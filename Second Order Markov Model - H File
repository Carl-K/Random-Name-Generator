#pragma once

#include <vector>
#include <climits>
#include <iostream>
#include <fstream>
#include <string>

class secondOrderMarkovModel
{
private:
	std::string abstractIndice; //stores potential chars to deal with
	std::vector< std::vector < std::vector< double > > > table; //second order markov model
	std::vector< std::vector< int > > totals; //stores total in case we ever need to reproduce original counts
	std::vector< std::string > undashedNames; //stores names to check against generated names
	bool alreadyExists( std::string s ); //check if name already exists
	int binarySearch( std::string s ); //binary search on dashedNames
	int binarySearchHelper( std::string s, std::vector< std::string > v, int lo, int hi ); //recursive helper function

	void fillWithFile(std::ifstream *file); //fill table with probabilities
	int alphabetLowerToIndex(char c); //convert ASCII letters to alphabet letters (a becomes 0 instead of 97)
	char indexToAlphabetLower(int n); //convert index 0 through 26 to alphabet letter (a ... z, _)
	std::string generateName(int minLength, int maxLength); //create one name
	char getCharFromProbabilities(char a, char b); //get char from set of probabilities of previous 2 chars
public:
	secondOrderMarkovModel(std::ifstream *file, const std::string userDefinedAbstractIndice); //takes file of names and user defined alphabet
	~secondOrderMarkovModel(void);

	void probabilitiesToConsole(); //print all probabilities
	void probabilitySetOfToConsole(char a, char b); //print set of probabilities
	std::vector< std::string > generateNames(int minLength, int maxLength, int numNames); //create x number of names
};

